----- intro

- RTOS == predictable computing, Real-Time responding on events, time deterministic nature, time deterministic switch between tasks == context switch time;
- threads are executed in the order of their priority;

----- lib including

- /Users/otimofie/.ac6/SW4STM32/firmwares
- FreeRTOS has the architecture specific code in portable/GCC folder => port.c
- FreeRTOS config file in ./Config

----- GPIO

- each port contains set of pins

----- UART/USART

- no specific port
- async == clock will be separate and start/stop bits;
- baud rate == how fast data is being sent {single bit}; TX/RX; FIFO; Tx/Rx buffers /control blocks;
- CTS == ClearToSend; RTS == RequestToSend; {hardware control}
- start bit {low} / stop bit {high} == USART control registers;
- master and slave has to have the same baud rate
- parity bit
- M bit == word length
- Virtual Com port is necessary to debug on PC
- interrupts are available

----- SPI (master - slave)

- master and couple of slave devices
- SCLK, MOSI (master out slave in), MISO, gpio1 - ss
- ss (slave select pin ) to the ground to select the slave
- based on shift registers
- modes: duplex; half-duplex; simplex;
- slave or master mode; ss for each slave;

----- general info

- IRQ == interrupt request
- two tasks on core looks like simultaneously as it is too fast as from human perspective
- each task has its own stack
- at the end of the task it has to be deleted == vTaskDelete()
- static => will be created as the global variable in a way;
- xTaskCreate == create subtask in the memory [RAM{Stack & Heap}] {TaskContolBlock, Stack}
- xTaskCreate => TaskControlBlock, Task Stack, Ready tasks are being managed by scheduler;
- virtual COM port can be used for debugging or semihosting (STM32 feature);
- duplex communication: Tx, Rx lines
- every pin is on the bus, without clock it wont work, pins can be configured in different ways according to the data-sheet
- idle task is created by kernel itself
- if ready and correct priority - will be executed
- idle task deallocates all other tasks
- Tmr Svc == timer task (software task == background daemon) is also created is it is configured == configUSE_TIMERS
- Free/Open/Safe RTOS
- RTOS is a kernel code
- Memory Paramus are configured in some MCU configuration or RTOS: heap, stack
- x == not a stdint type == naming convention; pc == pointer to char
- Remember about power issues = organise tasks correctly
- RTOS func start with the name of the file == naming, pro == private void
- VTaskDelay to have idle task
- Task can be deleted, idle task deletes task, vTaskDeleteNULL if itself
- Task can be suspended, ready, blocked, deleted
- Command list can be used 
- Notifications can be used = TCB variable, event to task; wait - notify
- all are on bus and has to be unblocked -> init and peripheral clock
- everything has a register that can be checked/modified;
- interrupt priority == priority of the kernel interrupt ( systick PendSV SVC interrupt )
- lowest priority is the highest priority for interrupts and highest priority is for tasks
- priority can be changed during the runtime (task priority set)
- contexts: ISR (Interrupt Service Routine) and task context; if ISR = use FromISR
- ISR preempts the thread context;
- ISR context can not be in half done mode, not allowed by ARM Cortex M processor; half done ISR is not allowed without FROM ISR Api; any ISR has to be finished; special functions have to be used; they have higher priority task woken
- suspend == never allowed to run on CPU; blocked state cat be unblocked with PendSV
- delay => blocked state
- hooks can be placed on the system events;
- xQueueCreate

