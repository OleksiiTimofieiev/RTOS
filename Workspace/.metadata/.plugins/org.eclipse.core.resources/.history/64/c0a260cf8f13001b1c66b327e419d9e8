/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/


#include <stdio.h>

#include "stm32f4xx.h"

#include "FreeRTOS.h"
#include "FreeRTOSConfig.h"
#include "task.h"

TaskHandle_t * xTaskHandle1 = NULL;
TaskHandle_t * xTaskHandle2 = NULL;

void vTask1_Handler(void *params);
void vTask2_Handler(void *params);

#ifdef USE_SEMIHOSTING
// to be used: -specs=rdimon.specs -lc -lrdimon in lincer/misc
	extern void initialise_monitor_handles();
#endif

int main(void)
{
#ifdef USE_SEMIHOSTING
	initialise_monitor_handles();
#endif

	// 1,  RCC set to the default state ==> SCC - 16 MHz;
	RCC_DeInit();

	// 2. Update system SystemCoreClock variable
	SystemCoreClockUpdate();

	// 3. Create tasks;
	xTaskCreate(vTask1_Handler, "Task-1", configMINIMAL_STACK_SIZE, NULL, 2, xTaskHandle1);
	xTaskCreate(vTask2_Handler, "Task-2", configMINIMAL_STACK_SIZE, NULL, 2, xTaskHandle2);

	// 4, start the scheduler
	vTaskStartScheduler();

	// will never be called if scheduler works fine
	for(;;);
}

void vTask1_Handler(void *params)
{
	while(1){
//		printf("Hello-1\n");
	}
}
void vTask2_Handler(void *params)
{
	while(1){
//		printf("Hello-2\n");
	}
}

static void	prvSetupHardware(void)
{
	// 1. Enable UART2 peripheral clock and GPIOA - rcc.c - APB == communication bus
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	// PA2 is UART2_TX, PA3 is UART2_RX
	// 2. Alternate function configuration of of MCU PIN to behave uart tx/rx
	GPIO_InitTypeDef gpio_uart_pins;

	gpio_uart_pins.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF; // alternate function mode
	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP; // idle -> logical up

	GPIO_Init(GPIOA, &gpio_uart_pins);

	// 3. AF mode settings for the pins;
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource_2, GPIO_AF_USART_2);

}
